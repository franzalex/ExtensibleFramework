<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dinofage.Data.XpressData
</name>
</assembly>
<members>
<member name="F:Dinofage.Data.SqlConnectionString.UseAltString">
	<summary>Use the alternative connection string.</summary>
	<remarks>Data Source and Initial Catalog will be replaced with Server and Database respectively.</remarks>
</member><member name="M:Dinofage.Data.SqlConnectionString.#ctor">
	<summary>
 Creates a new instance of the ConnectionString class.
 </summary>
</member><member name="M:Dinofage.Data.SqlConnectionString.#ctor(System.String,System.Boolean,System.String,System.String)">
	<summary>
 Creates a new instance of the SqlConnectionString class with the properties specified.
 </summary>
	<param name="DataSource">Data source for the connection.</param>
	<param name="UserID">User ID to log on to the database.</param>
	<param name="Password">Password to log on to the database.</param>
	<param name="IntegratedSecurity">Set to True to use Windows authentication; 
 False to use the User ID and Password provided.</param>
</member><member name="M:Dinofage.Data.SqlConnectionString.#ctor(System.String)">
	<summary>
 Creates a new instance of the SqlConnectionString class from the System.String specified.
 </summary>
	<param name="connString">System.String to be used to create the SqlConnectionString.</param>
</member><member name="P:Dinofage.Data.SqlConnectionString.DataProvider">
	<summary>This property is not used by the SqlConnectionString class.</summary>
</member><member name="P:Dinofage.Data.SqlConnectionString.DataSource">
	<summary>Data source of the connection.</summary>
	<remarks>When using the alternative syntax, the equivalent of the DataSource 
 property is the <see cref="P:Dinofage.Data.SqlConnectionString.Server"/> property.</remarks>
</member><member name="P:Dinofage.Data.SqlConnectionString.Server">
	<summary>Server on which the database is stored.</summary>
	<remarks>The Server property is equivalent to the <see cref="P:Dinofage.Data.SqlConnectionString.DataSource"/> property.</remarks>
</member><member name="P:Dinofage.Data.SqlConnectionString.InitialCatalog">
	<summary>Initial Catalog of the connection.</summary>
	<remarks>Using the alternative syntax, the equivalent of the 
 Initial Catalog property is the <see cref="P:Dinofage.Data.SqlConnectionString.Database"/> property.</remarks>
</member><member name="P:Dinofage.Data.SqlConnectionString.Database">
	<summary>Database of the connection.</summary>
	<remarks>The equivalent of the Database property is the <see cref="P:Dinofage.Data.SqlConnectionString.InitialCatalog"/> property.</remarks>
</member><member name="P:Dinofage.Data.SqlConnectionString.UserID">
	<summary>Get or set User ID to log on to the database.</summary>
</member><member name="P:Dinofage.Data.SqlConnectionString.Password">
	<summary>Get or set the password to log on to the database.</summary>
</member><member name="P:Dinofage.Data.SqlConnectionString.TrustedConnection">
	<summary>Gets or sets a Boolean value that indicates whether User ID 
 and Password are specified in the connection (when false) or whether 
 the current Windows account credentials are used for authentication (when true).</summary>
	<remarks>This property corresponds to the <b>IntegratedSecurity</b> property.</remarks>
</member><member name="P:Dinofage.Data.SqlConnectionString.IntegratedSecurity">
	<summary>Gets or sets a Boolean value that indicates whether User ID 
 and Password are specified in the connection (when false) or whether 
 the current Windows account credentials are used for authentication (when true).</summary>
	<remarks>This property corresponds to the <b>TrustedConnection</b> property.</remarks>
</member><member name="P:Dinofage.Data.SqlConnectionString.AttactDbFileName">
	<summary>Get or set the database file to attach on connect to the DataSource or Server.</summary>
</member><member name="M:Dinofage.Data.SqlConnectionString.ToString">
	<summary>
 Returns a System.String that represents  the current SqlConnectionString
 </summary>
</member><member name="M:Dinofage.Data.SqlConnectionString.Equals(Dinofage.Data.SqlConnectionString)">
	<summary>Determines whether the specified Dinofage.Data.OleDbConnectionStrng is equal to the current
  Dinofage.Data.OleDbConnectionStrng.</summary>
	<param name="connStr">The Dinofage.Data.OleDbConnectionStrng to compare with the current 
 Dinofage.Data.OleDbConnectionStrng.</param>
	<returns>True if the specified Dinofage.Data.OleDbConnectionStrng is equal to the 
 current Dinofage.Data.OleDbConnectionStrng; otherwise, False.</returns>
</member><member name="M:Dinofage.Data.SqlConnectionString.op_Explicit(System.String)~Dinofage.Data.SqlConnectionString">
	<summary>
 Converts a System.String to an SqlConnectionString.
 </summary>
	<param name="ConnStr">String to be converted to SqlConnectionString.</param>
	<returns>A new instance of SqlConnectionString from the string specified.</returns>
</member><member name="M:Dinofage.Data.SqlConnectionString.op_Implicit(Dinofage.Data.SqlConnectionString)~System.String">
	<summary>
 Converts an SqlConnectionString to a System.String.
 </summary>
	<param name="cs">SqlConnectionString to be converted to System.String</param>
</member><member name="T:Dinofage.Data.SqlConnectionString">
	<summary>
 Creates a connection string for accessing a database using the SqlClient data provider.
 </summary>
</member><member name="F:Dinofage.Data.OleDbConnectionString.OleDbProviders.JetOleDb">
	<summary>Microsoft.Jet.OLEDB.4.0</summary>
</member><member name="F:Dinofage.Data.OleDbConnectionString.OleDbProviders.AceOleDb">
	<summary>Microsoft.ACE.OLEDB.12.0</summary>
</member><member name="T:Dinofage.Data.OleDbConnectionString.OleDbProviders">
	<summary>Data Providers for the OLE DB data source.</summary>
</member><member name="M:Dinofage.Data.OleDbConnectionString.#ctor">
	<summary>
 Creates a new instance of the ConnectionString class.
 </summary>
</member><member name="M:Dinofage.Data.OleDbConnectionString.#ctor(Dinofage.Data.OleDbConnectionString.OleDbProviders,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Creates a new instance of the OleDbConnectionString class with the properties specified.
 </summary>
	<param name="DataSource">Data source for the connection.</param>
	<param name="DataProvider">Data provider for the connection.</param>
	<param name="UserID">User name to log on to the database.</param>
	<param name="Password">Password to log on to the database.</param>
	<param name="PersistSecurityInfo">Save username and password for future log on.</param>
</member><member name="M:Dinofage.Data.OleDbConnectionString.#ctor(System.String)">
	<summary>
 Creates a new instance of the OleDbConnectionString class from the System.String specified.
 </summary>
	<param name="connString">System.String to be used to create the OleDbConnectionString.</param>
</member><member name="P:Dinofage.Data.OleDbConnectionString.DataProvider">
	<summary>Get or set the Data Provider of the connection.</summary>
</member><member name="P:Dinofage.Data.OleDbConnectionString.DataProviderAsString">
	<summary>Get the Data Provider of the connection as a System.String.</summary>
</member><member name="P:Dinofage.Data.OleDbConnectionString.UserID">
	<summary>Get or set the user ID to log on to the database with.</summary>
</member><member name="P:Dinofage.Data.OleDbConnectionString.Password">
	<summary>Get or set the password to log on to the database.</summary>
</member><member name="P:Dinofage.Data.OleDbConnectionString.PersistSecurityInfo">
	<summary>Save username and password for future log on.</summary>
</member><member name="M:Dinofage.Data.OleDbConnectionString.ToString">
	<summary>
 Returns a System.String that represents  the current OleDbConnectionString
 </summary>
</member><member name="M:Dinofage.Data.OleDbConnectionString.Equals(Dinofage.Data.OleDbConnectionString)">
	<summary>Determines whether the specified Dinofage.Data.OleDbConnectionStrng is equal to the current
  Dinofage.Data.OleDbConnectionStrng.</summary>
	<param name="connStr">The Dinofage.Data.OleDbConnectionStrng to compare with the current 
 Dinofage.Data.OleDbConnectionStrng.</param>
	<returns>True if the specified Dinofage.Data.OleDbConnectionStrng is equal to the 
 current Dinofage.Data.OleDbConnectionStrng; otherwise, False.</returns>
</member><member name="M:Dinofage.Data.OleDbConnectionString.op_Explicit(System.String)~Dinofage.Data.OleDbConnectionString">
	<summary>
 Converts a System.String to an OleDbConnectionString.
 </summary>
	<param name="ConnStr">String to be converted to OleDbConnectionString.</param>
	<returns>A new instance of OleDbConnectionString from the string specified.</returns>
</member><member name="M:Dinofage.Data.OleDbConnectionString.op_Implicit(Dinofage.Data.OleDbConnectionString)~System.String">
	<summary>
 Converts an OleDbConnectionString to a System.String.
 </summary>
	<param name="cs">OleDbConnectionString to be converted to System.String</param>
</member><member name="T:Dinofage.Data.OleDbConnectionString">
	<summary>
 Creates a connection string for accessing a database using the OleDb data provider.
 </summary>
</member><member name="M:Dinofage.Data.SQLiteConnectionString.#ctor">
	<summary>
 Creates a new instance of the ConnectionString class.
 </summary>
</member><member name="M:Dinofage.Data.SQLiteConnectionString.#ctor(System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Creates a new instance of the OleDbConnectionString class with the parameters specified.
 </summary>
	<param name="DataSource">Data source for the connection.</param>
	<param name="Password">Password to log on to the database.</param>
	<param name="BinaryGUID">Store GUID as binrary data.</param>
	<param name="FailIfMissing">Database creation behaviour.</param>
	<param name="ReadOnly">Write access of the database.</param>
	<param name="UseUTF16">Use UTF16 encoding.</param>
	<param name="version">SQLite Version. (The SQLite.NET implementation does not support version 2.)</param>
</member><member name="M:Dinofage.Data.SQLiteConnectionString.#ctor(System.String)">
	<summary>
 Creates a new instance of the SQLiteConnectionString class from the System.String specified.
 </summary>
	<param name="connString">System.String to be used to create the SQLiteConnectionString.</param>
</member><member name="P:Dinofage.Data.SQLiteConnectionString.DataProvider">
	<summary>This property is not used by the SQLiteConnectionString class.</summary>
</member><member name="P:Dinofage.Data.SQLiteConnectionString.Version">
	<summary>SQLite version.</summary>
	<remarks>Version 2 is not supported by the SQL.NET class library.</remarks>
</member><member name="P:Dinofage.Data.SQLiteConnectionString.Password">
	<summary>Get or set the password used to log on to the database.</summary>
</member><member name="P:Dinofage.Data.SQLiteConnectionString.UseUTF16Encoding">
	<summary>Use UTF16 Encoding.</summary>
</member><member name="P:Dinofage.Data.SQLiteConnectionString.ReadOnly">
	<summary>Get or set a value indicating the write access of the database.</summary>
</member><member name="P:Dinofage.Data.SQLiteConnectionString.BinaryGUID">
	<summary>Get or set a value indicating whether GUIDs are stored in the database as binary data.</summary>
	<remarks><para>Normally, GUIDs are stored in a binary format.</para>
		<para>Set this property to False to store GUIDs as text.</para></remarks>
</member><member name="P:Dinofage.Data.SQLiteConnectionString.FailIfMissing">
	<summary>Get or set a value indicating the create database behaviour.</summary>
	<remarks>
		<para>When set to <b>True</b>, the database is not if it does not exist, an error is thrown instead.</para>
		<para>When set to <b>False</b>, the database is created automatically if it does not exist.</para></remarks>
</member><member name="M:Dinofage.Data.SQLiteConnectionString.ToString">
	<summary>
 Returns a System.String that represents  the current OleDbConnectionString
 </summary>
</member><member name="M:Dinofage.Data.SQLiteConnectionString.Equals(Dinofage.Data.OleDbConnectionString)">
	<summary>Determines whether the specified Dinofage.Data.OleDbConnectionStrng is equal to the current
  Dinofage.Data.OleDbConnectionStrng.</summary>
	<param name="connStr">The Dinofage.Data.OleDbConnectionStrng to compare with the current 
 Dinofage.Data.OleDbConnectionStrng.</param>
	<returns>True if the specified Dinofage.Data.OleDbConnectionStrng is equal to the 
 current Dinofage.Data.OleDbConnectionStrng; otherwise, False.</returns>
</member><member name="M:Dinofage.Data.SQLiteConnectionString.op_Explicit(System.String)~Dinofage.Data.SQLiteConnectionString">
	<summary>
 Converts a System.String to an OleDbConnectionString.
 </summary>
	<param name="ConnStr">String to be converted to OleDbConnectionString.</param>
	<returns>A new instance of OleDbConnectionString from the string specified.</returns>
</member><member name="M:Dinofage.Data.SQLiteConnectionString.op_Implicit(Dinofage.Data.SQLiteConnectionString)~System.String">
	<summary>
 Converts an OleDbConnectionString to a System.String.
 </summary>
	<param name="cs">OleDbConnectionString to be converted to System.String</param>
</member><member name="T:Dinofage.Data.SQLiteConnectionString">
	<summary>
 Creates a connection string for accessing a database using the SQLite.NET data provider.
 </summary>
</member><member name="P:Dinofage.Data.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Dinofage.Data.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Dinofage.Data.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:Dinofage.Data.ConnectionString.#ctor">
	<summary>
 Creates a new instance of the ConnectionString class.
 </summary>
</member><member name="M:Dinofage.Data.ConnectionString.#ctor(System.String,System.String)">
	<summary>
 Creates a new instance of the ConnectionString class with the parameters specified.
 </summary>
	<param name="DataSource">Data source for the connection.</param>
	<param name="DataProvider">Data provider for the connection.</param>
</member><member name="M:Dinofage.Data.ConnectionString.#ctor(System.String)">
	<summary>
 Creates a new instance of the ConnectionString class from the System.String specified.
 </summary>
	<param name="connString">System.String to be used to create the ConnectionString.</param>
</member><member name="P:Dinofage.Data.ConnectionString.DataProvider">
	<summary>Get or set the data provider of the connection.</summary>
</member><member name="P:Dinofage.Data.ConnectionString.DataSource">
	<summary>Get or set the data source for the connection.</summary>
</member><member name="P:Dinofage.Data.ConnectionString.OtherParameters">
	<summary>Get or set all other parameters of the connection string.</summary>
</member><member name="M:Dinofage.Data.ConnectionString.ToString">
	<summary>
 Returns a System.String that represents  the current ConnectionString
 </summary>
</member><member name="M:Dinofage.Data.ConnectionString.Equals(System.Object)">
	<summary>Determines whether the specified System.Object is equal to the current Dinofage.Data.ConnectionStrng.</summary>
	<param name="obj">The System.Object to compare with the current Dinofage.Data.ConnectionStrng.</param>
	<returns>true if the specified System.Object is equal to the current Dinofage.Data.ConnectionStrng; otherwise, false.</returns>
</member><member name="M:Dinofage.Data.ConnectionString.Equals(Dinofage.Data.ConnectionString)">
	<summary>Determines whether the specified Dinofage.Data.ConnectionStrng is equal to the current Dinofage.Data.ConnectionStrng.</summary>
	<param name="connStr">The Dinofage.Data.ConnectionStrng to compare with the current Dinofage.Data.ConnectionStrng.</param>
	<returns>true if the specified Dinofage.Data.ConnectionStrng is equal to the current Dinofage.Data.ConnectionStrng; otherwise, false.</returns>
</member><member name="M:Dinofage.Data.ConnectionString.op_Explicit(System.String)~Dinofage.Data.ConnectionString">
	<summary>
 Converts a System.String to a ConnectionString.
 </summary>
	<param name="ConnStr">String to be converted to ConnectionString.</param>
	<returns>A new instance of Dinofage.Data.ConnectionString from the string specified.</returns>
</member><member name="M:Dinofage.Data.ConnectionString.op_Implicit(Dinofage.Data.ConnectionString)~System.String">
	<summary>
 Converts a ConnectionString to a System.String.
 </summary>
	<param name="cs">ConnectionString to be converted to System.String</param>
</member><member name="M:Dinofage.Data.ConnectionString.op_Equality(Dinofage.Data.ConnectionString,Dinofage.Data.ConnectionString)">
	<summary>Equality comparer for the ConnectionString class.</summary>
	<param name="val1">First ConnectionString to be compared.</param>
	<param name="val2">Second ConnectionString to be comapred.</param>
	<returns>Boolean. True if both ConnectinStrings are equal; fale if otherwise.</returns>
</member><member name="M:Dinofage.Data.ConnectionString.op_Inequality(Dinofage.Data.ConnectionString,Dinofage.Data.ConnectionString)">
	<summary>Inequality comparer for the ConnectionString class.</summary>
	<param name="val1">First ConnectionString to be compared.</param>
	<param name="val2">Second ConnectionString to be comapred.</param>
	<returns>Boolean. True if both ConnectinStrings are not equal; fale if otherwise.</returns>
</member><member name="M:Dinofage.Data.ConnectionString.op_Equality(Dinofage.Data.ConnectionString,System.String)">
	<summary>Equality comparer for the ConnectionString class.</summary>
	<param name="val1">ConnectionString to be compared with a String.</param>
	<param name="val2">String to be comapred with a ConnectionString.</param>
	<returns>Boolean. True if both are equal; fale if otherwise.</returns>
</member><member name="M:Dinofage.Data.ConnectionString.op_Inequality(Dinofage.Data.ConnectionString,System.String)">
	<summary>Inequality comparer for the ConnectionString class.</summary>
	<param name="val1">ConnectionString to be compared with a String.</param>
	<param name="val2">String to be comapred with a ConnectionString.</param>
	<returns>Boolean. True if both are not equal; fale if otherwise.</returns>
</member><member name="T:Dinofage.Data.ConnectionString">
	<summary>
 Creates a connection string for accessing a database.
 </summary>
</member><member name="F:Dinofage.Data.XpressData.DataProviders.OLEDB">
	<summary>Use this DataProvider to connect to OLE DB data sources.</summary>
</member><member name="F:Dinofage.Data.XpressData.DataProviders.SQLite">
	<summary>Use this DataProvider to connect to SQLite data sources with SQLite.NET.</summary>
</member><member name="F:Dinofage.Data.XpressData.DataProviders.SQLServer">
	<summary>Use this DataProvider to connect to Microsoft SQL Server 2000 or above.</summary>
</member><member name="T:Dinofage.Data.XpressData.DataProviders">
	<summary>Data providers supported by the DinoFage.Data.XpressData class.</summary>
</member><member name="F:Dinofage.Data.XpressData.StatementExecutionStyle.None">
	<summary>Do not execute any statement automatically.</summary>
</member><member name="F:Dinofage.Data.XpressData.StatementExecutionStyle.AutoExecuteNonSelect">
	<summary>Automatically execute NonSelect statements.</summary>
</member><member name="F:Dinofage.Data.XpressData.StatementExecutionStyle.AutoExecuteSelect">
	<summary>Automatically execute Select statements.</summary>
</member><member name="T:Dinofage.Data.XpressData.StatementExecutionStyle">
	<summary>Indicates how statements passed to the XpressData should be executed.</summary>
</member><member name="E:Dinofage.Data.XpressData.UpdateStarted">
	<summary>Occurs before the ResultsTable is updated.</summary>
</member><member name="E:Dinofage.Data.XpressData.Updated">
	<summary>Occurs after the ResultsTable has been updated.</summary>
</member><member name="E:Dinofage.Data.XpressData.ColumnChanged">
	<summary>Occurs after a value has been changed for a specified System.Data.DataColumn in a System.Data.DataRow in the ResultsTable.</summary>
</member><member name="E:Dinofage.Data.XpressData.ColumnChanging">
	<summary>Occurs after a value is being changed for a specified System.Data.DataColumn in a System.Data.DataRow in the ResultsTable.</summary>
</member><member name="E:Dinofage.Data.XpressData.RowChanged">
	<summary>Occurs after a System.Data.DataRow in the ResultsTable has been changed successfully.</summary>
</member><member name="E:Dinofage.Data.XpressData.RowChanging">
	<summary>Occurs when a System.Data.DataRow in the ResultsTable is changing.</summary>
</member><member name="E:Dinofage.Data.XpressData.RowDeleted">
	<summary>Occurs after a row in the the ResultsTable has been deleted.</summary>
</member><member name="E:Dinofage.Data.XpressData.RowDeleting">
	<summary>Occurs before a row in the the ResultsTable is about to be deleted.</summary>
</member><member name="E:Dinofage.Data.XpressData.ExceptionEncounterd">
	<summary>Occurs when an exception is encountered by the DBDataSet class.</summary>
</member><member name="M:Dinofage.Data.XpressData.#ctor">
	<summary>
 Creates a new instance of DBDataSet.
 </summary>
</member><member name="M:Dinofage.Data.XpressData.#ctor(System.String,Dinofage.Data.XpressData.DataProviders,System.String)">
	<summary>
 Creates a new instance of DBDataSet.
 </summary>
	<param name="SelectCommand">Command for retrieving data from the datatabase.</param>
	<param name=" ConnectionString">ConnectionString for connecting to the database.</param>
	<param name="Provider">Data Provider to use in connecting to the database.</param>
</member><member name="M:Dinofage.Data.XpressData.#ctor(System.String,Dinofage.Data.XpressData.DataProviders)">
	<summary>Creates a new instance of DBDataSet.</summary>
	<param name=" ConnectionString">ConnectionString for connecting to the database.</param>
	<param name="provider">DataProvider to be used to connect to the database.</param>
</member><member name="M:Dinofage.Data.XpressData.#ctor(Dinofage.Data.ConnectionString,System.String)">
	<summary>
 Creates a new instance of DBDataSet.
 </summary>
	<param name="SelectCommand">Command for retrieving data from the datatabase.</param>
	<param name=" ConnectionString">ConnectionString for connecting to the database.</param>
</member><member name="M:Dinofage.Data.XpressData.#ctor(Dinofage.Data.ConnectionString)">
	<summary>Creates a new instance of DBDataSet.</summary>
	<param name=" ConnectionString">ConnectionString for connecting to the database.</param>
</member><member name="M:Dinofage.Data.XpressData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Initializes a new instance of DBDataSet class
 using the specified serialization information and context.
 </summary>
	<param name="info">A System.Runtime.Serialization.SerializationInfo
 containing the data to deserialize the class.</param>
	<param name="context">The System.Runtime.Serialization.StreamingContext
 containing the source and destination of the serialized stream.</param>
</member><member name="P:Dinofage.Data.XpressData.AutoClearExceptions">
	<summary>
 Set this property if you want the list of exceptions to be reset when a new command is made.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Dinofage.Data.XpressData.ConnectionString">
	<summary>Set or get the connection string for accessing the data source.</summary>
</member><member name="P:Dinofage.Data.XpressData.DataProvider">
	<summary>Get or set the data provider to use to connect to the data source.</summary>
	<returns>DataProviders. The data provider being used to connect to the data soure.</returns>
	<remarks>The DataProvider property is automatically changed when the ConnectionString property
 is changed based on the System.Type of the ConnectionString.<para>If the type of the 
 ConnectionString is unknown, DataProviders.OLEDB will be used automatically.</para></remarks>
</member><member name="P:Dinofage.Data.XpressData.ExceptionEncountered">
	<summary>Gets a value indicating whether or not an exception has been encountered.</summary>
	<remarks>
 The ExceptionEncountered property can be used to check if an exception has been encountered in
 the course of execution of the class.<para>When the list of exceptions the class has encountered
 is cleared, this property is reset as well.</para><para>A list of exceptions that have been 
 handled internally can be retrieved using the Exceptions property.</para>
	</remarks>
	<returns>Boolean. True if an exception has been encountered in the course of execution;
 otherwise false.</returns>
</member><member name="P:Dinofage.Data.XpressData.Exceptions">
	<summary>
 Retrieves a list of exceptions that have been encountered.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Dinofage.Data.XpressData.LastException">
	<summary>
 Retrieves the last exception that was encountered.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Dinofage.Data.XpressData.NonSelectStatement">
	<summary>Gets or set an SQL statement used to perform non-select commands against the data source.</summary>
</member><member name="P:Dinofage.Data.XpressData.ResultsTable">
	<summary>
 Contains the results of the last <seealso cref="M:Dinofage.Data.XpressData.ExecuteSelect">ExecuteSelect</seealso>.
 </summary>
	<remarks>
 When <seealso cref="M:Dinofage.Data.XpressData.ExecuteSelect">ExecuteSelect</seealso> is run, 
 this table is updated with the results.
 </remarks>
</member><member name="P:Dinofage.Data.XpressData.SelectStatement">
	<summary>Gets or sets an SQL statement or stored procedure used to select records in the data source.</summary>
	<value>Command used to query the database.</value>
</member><member name="P:Dinofage.Data.XpressData.StatementExecution">
	<summary>Get or set a StatementExecutionStyle that represents when the class executes statements passed to it.</summary>
</member><member name="M:Dinofage.Data.XpressData.ExecuteNonSelect">
	<summary>Executes the command stored in the NonSelectCommand property against 
 the data source in the ConnectionString property.</summary>
	<returns>Integer. The number of rows affected.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteNonSelect(System.String)">
	<summary>Executes the command passed against the data source in the ConnectionString and returns
 the number of rows affected.</summary>
	<param name="command">Command to be executed against the data source.</param>
	<returns>Integer. The number of rows affected.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteNonSelect(Dinofage.Data.ConnectionString,System.String)">
	<summary>Executes the command passed against the data source in the ConnectionString and returns
 the number of rows affected.</summary>
	<param name="command">Command to be executed against the data source.</param>
	<param name="connStr">Connection string to be used in connecting to the database.</param>
	<returns>Integer. The number of rows affected.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteNonSelect(System.String,Dinofage.Data.XpressData.DataProviders,System.String)">
	<summary>Executes the command passed against the data source in the ConnectionString and returns
 the number of rows affected.</summary>
	<param name="command">Command to be executed against the data source.</param>
	<param name="provider">DataProvider to use in connecting to the database.</param>
	<param name="connStr">Connection string to use in connecting to the database.</param>
	<returns>Integer. The number of rows affected.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteNonSelectInternal(System.String)">
	<summary>Executes the command passed against the data source in the ConnectionString and returns
 the number of rows affected.</summary>
	<param name="command">Command to be executed against the data source.</param>
	<returns>Integer. The number of rows affected.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteSelect">
	<summary>Executes SelectCommand to select records from the data source.</summary>
	<remarks>On successful execution of the selectCommand, the Table property of the class is updated
 with the results.</remarks>
	<returns>A DataTable containing the results obtained from execution of the query.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteSelect(System.String)">
	<summary>Executes an SQL SELECT statement or stored procedure to select records from the data source.</summary>
	<param name="selectCommand">A string that is an SQL SELECT statement or stored procedure to be 
 used by the XpressData to return a DataTable of the results.</param>
	<remarks>On successful execution of the selectCommand, the Table property of the class is updated
 with the results.</remarks>
	<returns>A DataTable containing the results obtained from execution of the query.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteSelect(Dinofage.Data.ConnectionString,System.String)">
	<summary>
 Executes an SQL SELECT statement or stored procedure to select records from the data source.
 </summary>
	<param name="selectCommand">
 A string that is an SQL SELECT statement or stored procedure to be used by the XpressData to 
 return a DataTable of the results.
 </param>
	<param name="connStr">Connection string to be used in connecting to the database.</param>
	<remarks>On successful execution of the selectCommand, the Table property of the class is updated
 with the results.</remarks>
	<returns>A DataTable containing the results obtained from execution of the query.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteSelect(System.String,Dinofage.Data.XpressData.DataProviders,System.String)">
	<summary>
 Executes an SQL SELECT statement or stored procedure to select records from the data source.
 </summary>
	<param name="selectCommand">
 A string that is an SQL SELECT statement or stored procedure to be used by the XpressData to 
 return a DataTable of the results.
 </param>
	<param name="connStr">Connection string to be used in connecting to the database.</param>
	<param name="provider">DataProvider to use in connecting to the database.</param>
	<remarks>On successful execution of the selectCommand, the Table property of the class is updated
 with the results.</remarks>
	<returns>A DataTable containing the results obtained from execution of the query.</returns>
</member><member name="M:Dinofage.Data.XpressData.ExecuteSelectInternal(System.String)">
	<summary>
 Returns a System.Data.DataTable containing the results of the execution of an SQL SELECT 
 statement or stored procedure which was used to select records from the data source.
 </summary>
	<param name="selectCommand">
 A string that is an SQL SELECT statement or stored procedure to be used to return a DataTable of the results.
 </param>
	<remarks>On successful execution of the selectCommand, the Table property of the class is updated
 with the results.</remarks>
	<returns>A DataTable containing the results obtained from execution of the query.</returns>
</member><member name="M:Dinofage.Data.XpressData.Update">
	<summary>Updates the database with the DataTable of the Table property.</summary>
	<remarks>This function uses the CommandBuilder to generate INSERT, DELETE and UPDATE commands
 from the SELECT query stored in the SelectCommand property.
 <para>For better control over updating, use the <see cref="M:Dinofage.Data.XpressData.ExecuteNonSelect"/> function.</para></remarks>
	<returns>Boolean. True if there was a change to the database; false if otherwise.</returns>
</member><member name="M:Dinofage.Data.XpressData.Update(System.Data.DataRow[])">
	<summary>Updates the database with the rows specified.</summary>
	<param name="Rows">DataRows to be used in updating the database.</param>
	<remarks>This function uses the CommandBuilder to generate INSERT, DELETE and UPDATE commands
 from the SELECT query stored in the SelectCommand property.
 <para>For better control over updating, use the <see cref="M:Dinofage.Data.XpressData.ExecuteNonSelect"/> function.</para></remarks>
	<returns>Boolean. True if there was a change to the database; false if otherwise.</returns>
</member><member name="M:Dinofage.Data.XpressData.Update(System.Data.DataTable)">
	<summary>Updates the database with the table specified.</summary>
	<param name="Table">Table to use to update the database.</param>
	<remarks>This function uses the CommandBuilder to generate INSERT, DELETE and UPDATE commands
 from the SELECT query stored in the SelectCommand property.
 <para>For better control over updating, use the <see cref="M:Dinofage.Data.XpressData.ExecuteNonSelect"/> function.</para></remarks>
	<returns>Boolean. True if there was a change to the database; false if otherwise.</returns>
</member><member name="M:Dinofage.Data.XpressData.ClearExceptions">
	<summary>
 Clears exceptions that have been raised by this instance of the DBDataSet class.
 </summary>
</member><member name="M:Dinofage.Data.XpressData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Populates a serialization information object with the data 
 needed to serialize the System.Data.DBDataSet.
 </summary>
	<param name="info">A System.Runtime.Serialization.SerializationInfo
 containing the data to serialize the class.</param>
	<param name="context">The System.Runtime.Serialization.StreamingContext
 containing the source and destination of the serialized stream.</param>
</member><member name="F:Dinofage.Data.XpressData.ExceptionEncounteredEventArgs.HandlingStyle.SentToCaller">
	<summary>
 The exception was thrown to the calling procedure.
 </summary>
</member><member name="F:Dinofage.Data.XpressData.ExceptionEncounteredEventArgs.HandlingStyle.HandledInternally">
	<summary>
 The exception was handled internally.
 </summary>
</member><member name="F:Dinofage.Data.XpressData.ExceptionEncounteredEventArgs.HandlingStyle.Suppressed">
	<summary>
 The exception was suppressed.
 </summary>
</member><member name="T:Dinofage.Data.XpressData.ExceptionEncounteredEventArgs.HandlingStyle">
	<summary>Describes how the exception was handled by the class.</summary>
</member><member name="P:Dinofage.Data.XpressData.ExceptionEncounteredEventArgs.Exception">
	<summary>
 The exception that was raised in the class.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:Dinofage.Data.XpressData.ExceptionEncounteredEventArgs.ExceptionHandling">
	<summary>
 Returns how the class handled the exception encountered.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="T:Dinofage.Data.XpressData.ExceptionEncounteredEventArgs">
	<summary>
 Provides data for the System.Data.DBDataSet ExceptionEncountered event.
 </summary>
</member><member name="T:Dinofage.Data.XpressData">
	<summary>Provides express functionality for accessing data.</summary>
</member>
</members>
</doc>